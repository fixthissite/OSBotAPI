{"name":"Lemons OSBot API","tagline":"\"lemons\" API","body":"##wtf is this?\r\nThis is my personal \"API\", or extension of OSBot's normal API (as a note I use Framework/API interchangeably in this document.) It has a few extra features, namely:\r\n\r\n- Web Walker\r\n- Advanced Interactions (wip)\r\n- Encourages reusable, configurable code\r\n- Helper functions to make life easier\r\n- No more filters, just Lambda goodness!\r\n- Probably some stuff I forgot about (lol)\r\n\r\n##Before you get going...\r\nIf you are planning on using the \"lemons\" API, great! Make sure to report bugs ASAP, I will work on a fix right away! Contact me at:\r\n\r\nSkype: admin@gfxtub.com\r\nSteam: dudeami\r\n\r\nFeel free to ask me anything you want, anytime, for any reason. If I don't answer, its probably because I don't sit at the computer all day :p I'll get with you ASAP though!\r\n\r\nPlease leave some info so I know why I want to add you, thanks!\r\n\r\n##So, its just a few extra methods?\r\nNot at all, it restructures how your scripts are written without actually making it much different. For a hands-on guide, go to the \"So, how do I get started?\" section below. This section will talk about how scripts are structured.\r\n\r\n###An example of using the API, and why it benefits you\r\nLets say you have a simple goblin killer script. At the moment it can find a goblin in the loaded region, then can interact with it. But, you want to add a few more features like Death walk, Re-equipping items, and Banking. Normally, you would just start writing some functions/cases/states/nodes/whatever in your script, and have those features. But what happens next time you need those features?\r\n\r\nThis API aims to solve this issue by introducing a \"Task\". The system somewhat resembles a \"Node\" setup, but with some improvements:\r\n\r\n- Tasks are actually mini-scripts, no need to do `script.getWhatever()`, just do `getWhatever()`\r\n- Tasks can be grouped together to make ComplexTasks\r\n- Tasks can be given default conditions, and addition conditions can be added.\r\n- Tasks can be made to accept configuration, making them robust and reusable.\r\n\r\n###Structuring your script\r\nNow, the API doesn't magically do this for you. It just allows you to setup your code in a more structured way without worrying about supporting that structure. So for the goblin script, here is an example tree:\r\n```\r\n|-GoblinKiller.java\r\n|-tasks *(folder)*\r\n|---AttackGoblinTask.java\r\n|---WalkToGoblinTask.java\r\n```\r\n\r\nBut wait, aren't we missing a few \"Tasks\"? Such as Banking, Equipping, Picking up of items, etc? Well, thanks to the system there is no need to rewrite these, as they are available from the API.\r\n\r\n###Setting up the \"GoblinKiller.java\" file\r\nThis file is what we call the \"Controller\". It basically determines the flow of the application. This almost reads like a list for simple programs, though will mainly be where configuration happens and determines the flow of your script. To see what this looks like, go to the next section!\r\n\r\n##So, how about some real code?\r\nYep, real code time. Going off the example above, we need to make 2 new \"Tasks\" (one of which is going to use an existing class), and one \"Controller\" class. Here are those 3 classes, well documented:\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}