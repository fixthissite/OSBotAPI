{"name":"Lemons OSBot API","tagline":"\"lemons\" API","body":"##wtf is this?\r\nThis is my personal \"API\", or extension of OSBot's normal API (as a note I use Framework/API interchangeably in this document.) It has a few extra features, namely:\r\n\r\n- Web Walker\r\n- Advanced Interactions (wip)\r\n- Encourages reusable, configurable code\r\n- Helper functions to make life easier\r\n- No more filters, just Lambda goodness!\r\n- Probably some stuff I forgot about (lol)\r\n\r\n##Before you get going...\r\nIf you are planning on using the \"lemons\" API, great! Make sure to report bugs ASAP, I will work on a fix right away! Contact me at:\r\n\r\nSkype: admin@gfxtub.com\r\nSteam: dudeami\r\n\r\nFeel free to ask me anything you want, anytime, for any reason. If I don't answer, its probably because I don't sit at the computer all day :p I'll get with you ASAP though!\r\n\r\nPlease leave some info so I know why I want to add you, thanks!\r\n\r\n##So, its just a few extra methods?\r\nNot at all, it restructures how your scripts are written without actually making it much different. For a hands-on guide, go to the \"So, how do I get started?\" section below. This section will talk about how scripts are structured.\r\n\r\n###An example of using the API, and why it benefits you\r\nLets say you have a simple goblin killer script. At the moment it can find a goblin in the loaded region, then can interact with it. But, you want to add a few more features like Death walk, Re-equipping items, and Banking. Normally, you would just start writing some functions/cases/states/nodes/whatever in your script, and have those features. But what happens next time you need those features?\r\n\r\nThis API aims to solve this issue by introducing a \"Task\". The system somewhat resembles a \"Node\" setup, but with some improvements:\r\n\r\n- Tasks are actually mini-scripts, no need to do `script.getWhatever()`, just do `getWhatever()`\r\n- Tasks can be grouped together to make ComplexTasks\r\n- Tasks can be given default conditions, and addition conditions can be added.\r\n- Tasks can be made to accept configuration, making them robust and reusable.\r\n\r\n###Structuring your script\r\nNow, the API doesn't magically do this for you. It just allows you to setup your code in a more structured way without worrying about supporting that structure. So for the goblin script, here is an example tree:\r\n```\r\n|-GoblinKiller.java\r\n|-AttackGoblinTask.java\r\n```\r\n\r\nBut wait, aren't we missing a few \"Tasks\"? Such as Walking, Banking, Equipping, Picking up of items, etc? Well, thanks to the system there is no need to rewrite these, as they are available from the API.\r\n\r\n###Setting up the \"GoblinKiller.java\" file\r\nThis file is what we call the \"Controller\". It basically determines the flow of the application. This almost reads like a list for simple programs, though will mainly be where configuration happens and determines the flow of your script. To see what this looks like, go to the next section!\r\n\r\n##So, how about some real code?\r\nYep, real code time. Going off the example above, we need to make 1 new \"Task\", and one \"Controller\" class. Here are those 2 classes, well documented:\r\n\r\n###GoblinKiller.java\r\n```java\r\nimport org.osbot.rs07.api.map.Position;\r\nimport org.osbot.rs07.api.ui.EquipmentSlot;\r\n\r\nimport lemons.api.script.TaskScript;\r\nimport lemons.api.tasks.PickupTask;\r\nimport lemons.api.tasks.WalkingTask;\r\nimport lemons.api.tasks.banking.EquipmentReq;\r\nimport lemons.api.tasks.banking.EquipmentReqTask;\r\nimport lemons.api.walking.map.Zone;\r\n\r\npublic class GoblinKiller extends TaskScript {\r\n\r\n\t// NOTE: You can NOT set variables like this, as the OSBot API is not available yet\r\n\tpublic boolean willNotWork = getInventory().contains(\"nothing\");\r\n\t\r\n\tpublic GoblinKiller() {\r\n\t\t// Note you can NOT use the OSBot API here either\r\n\t}\r\n\t\r\n\t\r\n\t@Override\r\n\tpublic void onStart() {\r\n\t\t// OSBot API is available, do stuff!\r\n\t\t\r\n\t\t// Make sure we run this, this initializes the lemons API\r\n\t\tsuper.onStart();\r\n\t\t\r\n\t\t// So, lets setup equipment handling\r\n\t\t// Note this is also a BankTask, so no need to add one of those!\r\n\t\taddTask(new EquipmentReqTask()\r\n\t\t\t// So, lets add the weapon requirement of \"Bronze sword\"\r\n\t\t\t.addReq(EquipmentSlot.WEAPON,\r\n\t\t\t\t// First false = not required, second = don't go bank\r\n\t\t\t\t// for immediately\r\n\t\t\t\tnew EquipmentReq(false, false)\r\n\t\t\t\t\t// Finally, add the Bronze sword to this req,\r\n\t\t\t\t\t// note you can chain addItem for multiple items.\r\n\t\t\t\t\t.addItem(\"Bronze sword\"))\r\n\t\t\t// Same thing, but for shields\r\n\t\t\t.addReq(EquipmentSlot.SHIELD,\r\n\t\t\t\tnew EquipmentReq(false, false)\r\n\t\t\t\t\t.addItem(\"Wooden shield\"))\r\n\t\t);\r\n\t\t\r\n\t\t// Lets add walking back to the the goblin killer area\r\n\t\taddTask(new WalkingTask(\r\n\t\t\t\t// Since OSBots Areas are pretty low-level, we use custom\r\n\t\t\t\t// \"Zones\". Note zones must be passed the script, use \"this\"\r\n\t\t\t\t// inside \"TaskScript\" and getScript() elsewhere.\r\n\t\t\t\tnew Zone(this)\r\n\t\t\t\t\t.rect(new Position(3242, 3222, 0), new Position(3268, 3270, 0))));\r\n\t\t\r\n\t\t// Lets add pickup task, since we want that before attacking. Note this pickup\r\n\t\t// task will be pretty permissive, and will go for almost anything in the area.\r\n\t\t\r\n\t\taddTask(new PickupTask().addItem(\"Coins\"));\r\n\t\t\r\n\t\t// Finally, add our \"AttackGoblinTask\"\r\n\t\taddTask(new AttackGoblinTask());\r\n\t}\r\n\t\r\n}\r\n```\r\n\r\n###AttackGoblinTask.java\r\n```java\r\nimport lemons.api.script.entities.NPC;\r\nimport lemons.api.tasks.templates.AbstractTask;\r\n\r\npublic class AttackGoblinTask extends AbstractTask {\r\n\r\n\t// Define a holder for our goblin\r\n\tprivate NPC gob;\r\n\t\r\n\t@Override\r\n\tpublic void run() {\r\n\t\t// Get our goblin using our neat function :p\r\n\t\tgob = getGoblin();\r\n\t\t\r\n\t\t\r\n\t\tif (gob == null) {\r\n\t\t\t// Uhh oh, no goblin! Wait until we got one...\r\n\t\t\terror(\"No goblin was detected! Sleeping...\");\r\n\t\t\tsleep(1000, 2000);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t\r\n\t\tif (gob.interact(\"Attack\")) {\r\n\t\t\t// No issues attacking goblin, wait until the task isn't active anymore\r\n\t\t\tinfo(\"Attacked goblin at \"+tile(gob).toString());\r\n\t\t\t// Dynamic sleeps, with awseome lambda goodness!\r\n\t\t\tsleep(2000, () -> !isActive());\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic NPC getGoblin() {\r\n\t\t// Simple returns the closest goblin which isn't under attack\r\n\t\t// This can be improved on\r\n\t\treturn getNpcs().closest(o -> o.hasName(\"Goblin\")\r\n\t\t\t\t\t&& !o.isUnderAttack());\r\n\t}\r\n\r\n\t@Override\r\n\tpublic boolean isActive() {\r\n\t\t// Only try and attack if we have noone to interact with,\r\n\t\t// or are interacting with something thats dead\r\n\t\treturn myPlayer().getInteracting() == null ||\r\n\t\t\t\tmyPlayer().getInteracting().getHealth() == 0;\r\n\t}\r\n\r\n}\r\n```\r\n\r\n##So, wheres the documentation?\r\nThat will be coming soon ^^ If you need help in the mean time, contact me using the section above (has my Skype/Steam messanger handles)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}